import 'package:instagram_clone/models/global_data.dart';import 'package:instagram_clone/ui/shared/ui_helpers.dart';import 'package:instagram_clone/ui/theme/app_text_styles.dart';import 'package:instagram_clone/ui/views/home/home_view_model.dart';import 'package:instagram_clone/ui/views/widgets/busy_button.dart';import 'package:instagram_clone/ui/views/widgets/input_field.dart';import 'package:flutter/material.dart';import 'package:intl/intl.dart';import 'package:stacked/stacked.dart';class HomeBody extends ViewModelWidget<HomeViewModel> {  @override  Widget build(BuildContext context, HomeViewModel viewModel) {    return Padding(      padding: const EdgeInsets.all(8.0),      child: SingleChildScrollView(          child: Column(        children: [          ///user details          buildUserDetails(),          verticalSpaceSmall,          ///product          buildListProduct(viewModel),          verticalSpaceSmall,          ///add product          Row(            mainAxisSize: MainAxisSize.max,            mainAxisAlignment: MainAxisAlignment.center,            children: [              BusyButton(                title: 'Add Product',                busy: viewModel.busy,                onPressed: () {                  viewModel.addProduct();                },              )            ],          ),          verticalSpaceSmall,          ///bottom section          buildBottomSection(viewModel, context),          verticalSpaceSmall,          ///generate          Row(            mainAxisSize: MainAxisSize.max,            mainAxisAlignment: MainAxisAlignment.center,            children: [              BusyButton(                title: 'Generate',                busy: viewModel.busy,                onPressed: () {                  GlobalData.generateLinkModel.products =                      GlobalData.productsList;                  GlobalData.generateLinkModel.durations = viewModel.durations;                  viewModel.generate();                },              )            ],          ),        ],      )),    );  }  Card buildBottomSection(HomeViewModel viewModel, BuildContext context) {    return Card(      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),      child: Padding(        padding: const EdgeInsets.all(18.0),        child: Column(          mainAxisSize: MainAxisSize.min,          children: [            ///Total            InputField(              additionalNote: 'Total AED',              isReadOnly: true,              placeholder: viewModel.totalAed.toString(),              controller: GlobalData.generateLinkModel.nameController,              onChanged: (value) {                GlobalData.generateLinkModel.name = value;              },            ),            verticalSpaceSmall,            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              mainAxisSize: MainAxisSize.min,              children: List.generate(                2,                (index) => Expanded(                  flex: 5,                  child: CheckboxListTile(                      controlAffinity: ListTileControlAffinity.leading,                      title: Text(                        viewModel.checkBoxTitle[index].title,                        style: AppTextStyles.secondaryTextStyle2(),                      ),                      value: viewModel.checkBoxTitle[index].isChecked,                      onChanged: (value) {                        viewModel.updateCheckBox(value, index);                      }),                ),              ),            ),            ///subscription section            Visibility(              visible: viewModel.checkBoxTitle[1].isChecked,              child: Column(                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  Padding(                    padding: const EdgeInsets.symmetric(                        horizontal: 20, vertical: 10),                    child: Row(                      children: [                        Expanded(flex: 5, child: Text('Select Duration')),                        SizedBox(                          width: 120,                          child: Row(                            children: <Widget>[                              IconButton(                                icon: new Icon(Icons.remove),                                onPressed: () => viewModel.updateItemCounter(                                    viewModel.itemCounter != 0                                        ? viewModel.itemCounter - 1                                        : viewModel.itemCounter),                              ),                              Text(viewModel.itemCounter.toString()),                              IconButton(                                  icon: new Icon(Icons.add),                                  onPressed: () => viewModel.updateItemCounter(                                      viewModel.itemCounter + 1))                            ],                          ),                        ),                      ],                    ),                  ),                  Wrap(                      children: List.generate(                    viewModel.itemCounter,                    (index) => Padding(                      padding: const EdgeInsets.all(8.0),                      child: FlatButton.icon(                        icon: Icon(                          Icons.calendar_today,                          size: 20,                        ),                        shape: RoundedRectangleBorder(                            borderRadius: BorderRadius.circular(8.0),                            side: BorderSide(color: Colors.blue)),                        onPressed: () {                          _selectDate(context, index, viewModel);                        },                        label: Text(viewModel.durations[index]),                      ),                    ),                  ))                ],              ),            )          ],        ),      ),    );  }  ListView buildListProduct(HomeViewModel viewModel) {    return ListView.builder(      physics: NeverScrollableScrollPhysics(),      shrinkWrap: true,      itemCount: GlobalData.productsList.length,      itemBuilder: (context, index) => Card(        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),        child: Padding(          padding: const EdgeInsets.all(18.0),          child: Column(            mainAxisSize: MainAxisSize.min,            crossAxisAlignment: CrossAxisAlignment.start,            children: [              verticalSpaceSmall,              Text(                'Product ${index + 1}',                style: AppTextStyles.headerTextStyle(),              ),              verticalSpaceSmall,              ///Product              InputField(                placeholder: 'Product Title',                controller:                    GlobalData.productsList[index].productNameController,                onChanged: (value) {                  GlobalData.productsList[index].title = value;                },              ),              verticalSpaceSmall,              ///Details              InputField(                placeholder: 'Product Details',                controller:                    GlobalData.productsList[index].productDetailsController,                onChanged: (value) {                  GlobalData.productsList[index].details = value;                },              ),              verticalSpaceSmall,              ///Amount              InputField(                placeholder: 'Amount AED',                controller: GlobalData.productsList[index].amountController,                onChanged: (value) {                  GlobalData.productsList[index].amout = value;                },              ),              verticalSpaceSmall,              ///VAT              InputField(                placeholder: 'VAT %',                controller: GlobalData.productsList[index].vatController,                onChanged: (value) {                  GlobalData.productsList[index].vat = value;                },              ),              verticalSpaceSmall,              ///Total Id              InputField(                textInputType: TextInputType.number,                placeholder: 'Total AED',                controller: GlobalData.productsList[index].totalController,                onChanged: (value) {                  GlobalData.productsList[index].total = int.parse(value);                  viewModel.getTotalAED();                },              ),              verticalSpaceSmall,            ],          ),        ),      ),    );  }  Card buildUserDetails() => Card(        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),        child: Padding(          padding: const EdgeInsets.all(18.0),          child: Column(            mainAxisSize: MainAxisSize.min,            children: [              ///name              InputField(                placeholder: 'Name',                controller: GlobalData.generateLinkModel.nameController,                onChanged: (value) {                  GlobalData.generateLinkModel.name = value;                },              ),              verticalSpaceSmall,              ///phone              InputField(                textInputType: TextInputType.number,                placeholder: 'Phone',                controller: GlobalData.generateLinkModel.phoneController,                onChanged: (value) {                  GlobalData.generateLinkModel.phone = value;                },              ),              verticalSpaceSmall,              ///email              InputField(                placeholder: 'Email',                controller: GlobalData.generateLinkModel.emailController,                onChanged: (value) {                  GlobalData.generateLinkModel.emailId = value;                },              ),              verticalSpaceSmall,              ///Merchant Id              InputField(                placeholder: 'Merchant VAT ID',                controller: GlobalData.generateLinkModel.merchantController,                onChanged: (value) {                  GlobalData.generateLinkModel.merchantVat = value;                },              ),              verticalSpaceSmall,            ],          ),        ),      );  ///date picker  Future<Null> _selectDate(      BuildContext context, int index, HomeViewModel viewModel) async {    final DateTime picked = await showDatePicker(        context: context,        initialDate: DateTime.now(),        firstDate: DateTime(2015, 8),        lastDate: DateTime(2101));    if (picked != null) {      viewModel.updateDuration(index, DateFormat('yyyy-MM-dd').format(picked));    }  }}